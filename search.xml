<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ooUnit1</title>
      <link href="/2025/03/20/ooUnit1/"/>
      <url>/2025/03/20/ooUnit1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>oo第一单元的任务是表达式括号展开与化简，课程组的目的在于通过这一十分结构化的任务来把我们引入面向对象的设计思想，并设计了三次迭代作业开发，旨在模拟真实的作业环境。</p><p>这一个月以来，确实在oo这门课上吃了不少苦，但通过自己的努力从第一次作业进C组到第三次作业强测无bug，互测只有一个bug，也学到了一些东西。通过这篇博客，本人将对自己的这三次代码进行详细分析，并做一些总结。</p><h1 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h1><p>第一次作业是对单变量（x）的多项式的展开。</p><h2 id="UML类图与架构设计"><a href="#UML类图与架构设计" class="headerlink" title="UML类图与架构设计"></a>UML类图与架构设计</h2><p>本次作业代码的UML图如下</p><p><img src="/../images/hw1.jpg" alt="hw1"></p><h2 id="任务分析"><a href="#任务分析" class="headerlink" title="任务分析"></a>任务分析</h2><h3 id="表达式解析"><a href="#表达式解析" class="headerlink" title="表达式解析"></a>表达式解析</h3><p>这部分内容比较简单，我们沿用pre中hw7递归下降的做法，首先将<code>Input</code>传给<code>Lexer</code>，在<code>Lexer</code>建立的过程中，就完成了对各种符号的特异提取以及对变量（这里只有<code>x</code>）和数字的识别，并存储为一个<code>Token</code>串。然后将建立好的<code>Lexer</code>传递给<code>parser</code>。</p><p>我们第一次听说递归下降的时候可能会感到有些陌生。递归下降，在这里就是通过层层递归调用来完成对字符串<code>Input</code>的结构化建树，代码逻辑和建树的过程一致，自顶向下的建立好每一个分支。</p><p>我们这里需要建立的就是一个<code>Expression</code>的树，根节点是一个<code>Expr</code>，它由若干个子节点<code>Term</code>相加表述而成。同理，<code>Term</code>由若干个<code>Factor</code>相乘表述而成，若<code>Factor</code>是<code>Num</code>或者<code>Var</code>则递归到了终点，若为<code>ExprFactor</code>(一种特殊的<code>Factor</code>,内容是一个<code>Expr</code>)则跳到对<code>Expr</code>的解析。</p><p>所以代码中递归下降的核心就在于<code>parser</code>的<code>parseExpr()</code>中。</p><p>调用这个函数后会返回一个建立好的<code>Expr</code>，并交给下一步处理。</p><h3 id="括号展开"><a href="#括号展开" class="headerlink" title="括号展开"></a>括号展开</h3><p>这部分是本次作业的难点，我们需要将表达式展开为如下形式：</p><p>$$ E &#x3D; \sum ax^i $$</p><p>我们不难发现，这种形式的最小单元是一个单项式，于是我们建立<code>MiniTerm</code>类来描述这个最小单元（事实上一开始的实现并不好，代码结构混乱，也导致了很多的bug，我将在后面重构整个代码结构，但是大致的思路没什么问题）。<br>我们在类内部实现MiniTerm的乘法和加法的化简，来实现对括号的展开，由于会重构的原因，代码展示会放在后面的部分。</p><h2 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h2><h3 id="表达式解析-1"><a href="#表达式解析-1" class="headerlink" title="表达式解析"></a>表达式解析</h3><p>本部分沿用了pre的代码，这里就不再展开了。</p><h3 id="括号展开-1"><a href="#括号展开-1" class="headerlink" title="括号展开"></a>括号展开</h3><h4 id="重构前"><a href="#重构前" class="headerlink" title="重构前"></a>重构前</h4><p>其实可以发现在重构前，可以发现我的代码有两个主要的问题：</p><ul><li>Expr、Term和Factor内部的属性其实并不是真正的private的，存在大量的get方法将他们暴露在外，也导致了我的不良的代码结构和很多的bug。</li><li>建类混乱，没有清晰的层次结构。</li></ul><p>如，我对于展开后的表达式的结构化没有表示的很好，只有一个简单的最小单元类，事实上应该有一个多项式类来管理多项式乘法，将其与单项式加法区分开。</p><h4 id="重构后"><a href="#重构后" class="headerlink" title="重构后"></a>重构后</h4><p>首先是我重构后的UNL类图：</p><p><img src="/../images/hw1_re.png" alt="hw1_re"></p><p>可以发现，我对于解析包做了保留，主要在化简包上做了工作。</p><p>首先，我建立了一个静态的类<code>Simplifier</code>，它内部的函数<code>simplifyExpr(Expr expr)</code>会将传进来的expr按层次解析：</p><pre><code>public static Poly simplifyExpr(Expr expresiton) &#123;    Poly result = new Poly();    for (int i = 0; i &lt; expresiton.amount(); i = i + 1) &#123;        Term term = expresiton.getTerm(i);        Poly termPoly = simplifyTerm(term);        result = Poly.addPoly(result, termPoly);    &#125;    return result;&#125;public static Poly simplifyTerm(Term term) &#123;    Poly result = new Poly();    for (int i = 0; i &lt; term.amount(); i = i + 1) &#123;        Factor factor = term.getFactor(i);        Poly factorPoly = simplifyFactor(factor);        result = Poly.multPoly(result, factorPoly);    &#125;    return result;&#125;public static Poly simplifyFactor(Factor factor) &#123;    return factor.toPoly();&#125;</code></pre><p>把解析的过程完全脱离于其他工作，代码结构清晰了不少。</p><p>我们可以发现在<code>simplifyFactor(Factor factor)</code>调用了<code>toPoly()</code>方法，这就要引入我们的Poly类了。<br>主要属性如下：</p><pre><code>private HashMap&lt;Unit, BigInteger&gt; units;private ArrayList&lt;Unit&gt; flag;</code></pre><p>其中units用来储存这次作业的最小单元：单项式和对于的幂；flag用来储存units中的Key，主要作用是在后期取值时保护属性不暴露在外，也方便索引unit。</p><p>然后我们在Poly中实现了对Unit的加法：</p><pre><code>public void addUnit(Unit m, BigInteger c) &#123;    Unit newM = m.check();    if (units.containsKey(newM)) &#123;        BigInteger coe = units.get(newM);        coe = coe.add(c);        if (coe.equals(BigInteger.ZERO)) &#123;            units.remove(newM);            flag.remove(newM);            if (!units.containsKey(Unit.ONE)) &#123;                units.put(Unit.ONE, BigInteger.ZERO);//保留常数项                flag.add(Unit.ONE);            &#125;        &#125;        units.replace(newM, coe);    &#125; else &#123;        units.put(newM, c);        flag.add(newM);    &#125;&#125;</code></pre><p>还实现了对Poly的乘法和加法：</p><pre><code>public static Poly multPoly(Poly poly1, Poly poly2) &#123;    if (poly1.amount() == 0) &#123;        return poly2;    &#125;    if (poly2.amount() == 0) &#123;        return poly1;    &#125;    Poly result = new Poly();    for (Unit unit1 : poly1.units.keySet()) &#123;        for (Unit unit2 : poly2.units.keySet()) &#123;            //...        &#125;    &#125;    return result;&#125;public static Poly addPoly(Poly poly1, Poly poly2) &#123;    Poly result = new Poly();    for (Unit unit : poly1.units.keySet()) &#123;        result.addUnit(unit, poly1.units.get(unit));    &#125;    for (Unit unit : poly2.units.keySet()) &#123;        result.addUnit(unit, poly2.units.get(unit));    &#125;    return result;&#125;</code></pre><p>在以上的运算中始终保持最终的返回结果是最简的。</p><p>这样之后，我们就可以在Factor中每一个类都写一个toPoly方法，并层层向上传递，当传到顶层的时候就构建好了我们所需要的没有括号的表达式结构了。</p><p>这次重构给我带来的感受很多，主要有以下几点：</p><ul><li>不要为了优化代码量和代码性能而丧失代码的结构性和可读性。</li><li>对于一个类的内容的处理要在对应的类中写一个方法来实现，并返回最终的结果。这样既减少了代码的耦合性，又增加了代码的可读性。</li></ul><h1 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h1><h2 id="UML类图与架构设计-1"><a href="#UML类图与架构设计-1" class="headerlink" title="UML类图与架构设计"></a>UML类图与架构设计</h2><p>如下：</p><p><img src="/../images/hw2.png" alt="hw2"></p><h2 id="代码架构分析"><a href="#代码架构分析" class="headerlink" title="代码架构分析"></a>代码架构分析</h2><p>第二次作业新增的内容是括号嵌套、递归自定义函数和三角函数因子。</p><p>由于我在上一次作业已经实现了括号嵌套（ExprFactor递归到Expr）所以这次作业我将就三角函数因子和自定义递归函数的处理讲解。</p><h3 id="三角函数因子"><a href="#三角函数因子" class="headerlink" title="三角函数因子"></a>三角函数因子</h3><p>这部分内容比较简单，我们首先需要在Factor接口新增两个实现即可，分别是<code>SinFactor</code>和<code>CosFactor</code>，并实现其<code>toPoly()</code>方法。</p><p>其次需要改写<code>Unit</code>，新增如下属性</p><pre><code>private ArrayList&lt;Poly&gt; sinPolys;private HashMap&lt;Poly, BigInteger&gt; sinFactors;private ArrayList&lt;Poly&gt; cosPolys;private HashMap&lt;Poly, BigInteger&gt; cosFactors;</code></pre><p>并改写Poly和Unit的乘法加法逻辑即可，就可以完成三角函数因子这部分内容。</p><p>要注意的是三角函数因子内部存储的内容是因子。</p><h3 id="递归自定义函数"><a href="#递归自定义函数" class="headerlink" title="递归自定义函数"></a>递归自定义函数</h3><p>说实话，这部分内容花了我很大一部分心思，我初期苦恼于如何有效的存储自定义函数和调用自定义函数。</p><p>经过一天的思考后我的解决方案是沿用递归下降的思路遍历<code>Expr</code>树：</p><p>1.新建一个<code>Function</code>类，类内部的属性为：</p><pre><code>private final String name;//函数名private final ArrayList&lt;String&gt; paras;//形参列表private final BigInteger coeFunc1;//n-1项的系数private final ArrayList&lt;Expr&gt; paraFunc1; //n-1项的实参形式，用Expr储存private final BigInteger coeFunc2;//n-2项的系数private final ArrayList&lt;Expr&gt; paraFunc2; //n-2项的实参形式，用Expr储存private final Expr func0;//0项的形参表达式private final Expr func1;//1项的形参表达式private final Expr expression;//函数表达式</code></pre><p>2.新建一个静态<code>SolveFunc</code>类存储已经定义好的函数，用函数名索引<code>Function</code>存在HashMap中，处理传入的<code>Expr</code>，替换所有的<code>FuncFactor</code>后返回新的<code>Expr</code>。内部方法如下：</p><pre><code>public static Expr solveExpr(Expr expr) &#123;    Expr newExpr = new Expr();    for (int i = 0; i &lt; expr.amount(); i += 1) &#123;        Term term = expr.getTerm(i);        term = solveTerm(term);        newExpr.addTerm(term);    &#125;    return newExpr;&#125;public static Term solveTerm(Term term) &#123;    Term newTerm = new Term();    for (int i = 0; i &lt; term.amount(); i += 1) &#123;        Factor factor = term.getFactor(i);        newTerm.addFactor(solveFactor(factor));    &#125;    return newTerm;&#125;public static Factor solveFactor(Factor factor) &#123;    return factor.solveFunc();&#125;</code></pre><p>3.在所有<code>Factor</code>中实现对<code>FuncFactor</code>的处理，以实现替换书上的所有<code>FuncFactor</code>节点。</p><p>具体逻辑是遍历树上的每一个<code>Factor</code>节点，若遇上<code>FuncFactor</code>则调用<code>Function.call()</code>并传入该函数因子的信息，替换的逻辑中也沿用了<strong>递归下降</strong>的想法，先自顶向下构建好待替换的<code>Expr</code>(设计斐波那契递归,层层计算<code>n-1</code>项<code>Expr</code>和<code>n-2</code>项<code>Expr</code>然后相加返回到上一层)，然后包装成<code>ExprFactor</code>后放入<code>FuncFactor</code>的位置即可。<br>经过上述操作后，<code>Expr</code>没有了<code>FuncFactor</code>节点，传给<code>Simplifier</code>进行括号展开即可。</p><h2 id="Poly和Unit的新增内容"><a href="#Poly和Unit的新增内容" class="headerlink" title="Poly和Unit的新增内容"></a>Poly和Unit的新增内容</h2><p>本次作业的最小单元不再是 $ax^n$ 而是 $ ax^n\prod_{i}sin(Factor_i)\prod_{i}cos(Factor_i)$<br>所以我们只需要改写一下加法和乘法的逻辑保证依然在计算的过程中是最简的即可。</p><h1 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h1><h2 id="UML类图与架构设计-2"><a href="#UML类图与架构设计-2" class="headerlink" title="UML类图与架构设计"></a>UML类图与架构设计</h2><p>如下：</p><p><img src="/../images/hw3.png" alt="hw3"></p><h2 id="代码架构分析-1"><a href="#代码架构分析-1" class="headerlink" title="代码架构分析"></a>代码架构分析</h2><p>可以发现，第三次作业的UML类图相比较于第二次作业的UML类图几乎没什么改动，一方面是因为这次作业的新增内容只有求导因子和自定义普通函数，另一方面是因为在第一次重构后我的代码的架构的优良。<br>由此也是第一次尝到了架构好的甜处。</p><h2 id="自定义普通函数"><a href="#自定义普通函数" class="headerlink" title="自定义普通函数"></a>自定义普通函数</h2><p>由于上一次作业已经实现了自定义递归函数，那我们也可以把自定义普通函数归于此，只需要把它看作递归深度为0的自定义递归函数即可，call时直接返回储存的0项表达式。</p><h2 id="求导因子"><a href="#求导因子" class="headerlink" title="求导因子"></a>求导因子</h2><p>第一步和第二次作业一样，先增加求导因子实现Factor这个接口。我们不难发现，实现求导的过程其实和替换FuncFactor的过程是可以很相似的，我们只需要一样的遍历整个树，当发现求导因子时，就递归的构建起表达式即可，这部分实现，我们放在了DerFactor里，代码结构如下：</p><pre><code>//SolveDer内容public static Expr solveExpr(Expr expr) &#123;    Expr newExpr = new Expr();    for (int i = 0; i &lt; expr.amount(); i += 1) &#123;        Term term = expr.getTerm(i);        term = solveTerm(term);        newExpr.addTerm(term);    &#125;    return newExpr;&#125;public static Term solveTerm(Term term) &#123;    Term newTerm = new Term();    for (int i = 0; i &lt; term.amount(); i += 1) &#123;        Factor factor = term.getFactor(i);        newTerm.addFactor(solveFactor(factor));    &#125;    return newTerm;&#125;public static Factor solveFactor(Factor factor) &#123;    return factor.solveDer();&#125;//DerFactor内容@Overridepublic Factor solveDer() &#123;    Expr newExpr = SolveDer.solveExpr(expr);//先解决expr的dx    newExpr = (Expr) newExpr.derive(); // expr.derive返回的是表达式    return new ExprFactor(newExpr, coe, exp);&#125;</code></pre><p>然后这次作业就很简单的被我们完成了。（好耶！！</p><h1 id="Bug分析"><a href="#Bug分析" class="headerlink" title="Bug分析"></a>Bug分析</h1><p>很不幸，本人在Unit1出现了许多的bug，让我们来一一分析一下bug的原因。</p><h2 id="HW1"><a href="#HW1" class="headerlink" title="HW1"></a>HW1</h2><p>在上文我们已经说过，第一作业的bug大多因为架构的不合理和代码风格的差劲。</p><p>那么不合理之处在哪呢？<br>1.类之间的耦合度高，没有做到把任务分解简化，而是让同一块处理多个混合的任务，非常容易导致bug。<br>下面就是hw1改写前的一些代码指标：</p><p><img src="/../images/hw1_%E6%8C%87%E6%A0%871%20.png" alt="指标1"></p><p>从左至右分别为OCavg Ocmax WMC</p><p><img src="/../images/hw1_%E6%8C%87%E6%A0%872.png" alt="指标2"></p><p>从左至右分别为Cogc ec(G) iv(G) v(G)</p><p>我们可以很明显的看出计算类和主类在多个指标中出现了不合理的数值，这明显是有缺陷的。</p><p>而在重构之后：</p><p><img src="/../images/hw1re.png" alt="hw1_re_指标"></p><p>计算类的指标好了许多，直观上我们也能感受到代码架构上的清晰化。</p><h2 id="hw2"><a href="#hw2" class="headerlink" title="hw2"></a>hw2</h2><p>第二次作业的bug主要是因为一处遗漏而导致的meg恶行bug，在强测多个点都出现了这个bug，在bug修复中修好后就大部分通过了。</p><p>另外一小部分是在优化中出了问题，这告诉我们优化需谨慎！！！</p><p>下面是hw2的一些指标</p><p><img src="/../images/hw2_%E6%8C%87%E6%A0%87.png" alt="hw2_指标"></p><p><img src="/../images/hw1re.png" alt="hw2_指标"></p><h2 id="hw3"><a href="#hw3" class="headerlink" title="hw3"></a>hw3</h2><p>第三次作业的bug是因为一处笔误导致的bug，这里就不展开描述了。</p><p><img src="/../images/hw2_%E6%8C%87%E6%A0%87.png" alt="hw3_指标"></p><p><img src="/../images/hw1re.png" alt="hw3_指标"></p><p><img src="/../images/hw3_%E6%8C%87%E6%A0%87.png" alt="hw3_指标"></p><h2 id="指标展现的优点"><a href="#指标展现的优点" class="headerlink" title="指标展现的优点"></a>指标展现的优点</h2><p>首先我的代码的耦合程度相较于我身边的同学是比较低的，我将各个任务分散到不同的模块中，从string到Expr的转换，处理FuncFactor，处理DerFactor，构建多项式并输出都是由独立的模块负责，并且将来如果有新的因子和处理，我还可以通过增添新的模块来完成这个任务，我的代码也因此可读性很高，也十分方便定位bug。</p><h2 id="指标展现的缺点"><a href="#指标展现的缺点" class="headerlink" title="指标展现的缺点"></a>指标展现的缺点</h2><p>但是由于上面不断的增添模块，如果需求越来越多，我的代码量也会越来越多，这将变得不利于维护。</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>本单元的优化我做的比较简单，主要集中在三角函数的合并优化。<br>首先是合并同类项，我重写了Expr、Term和Factor的HashCode和equals方法，这使得我判断两个Unit是否是同样的变得很简单，只需要调用containsKey()判断是否已经在Poly里即可。</p><p>但是这样还有一个问题，就是如果sin或者cos内的factor正好相差一个-1的系数呢？这个问题要完全解决比较苦难，所以我选择根据sin或cos里Poly的第一个Unit的符号做判断，如果是负号，那我选择将负号提到外面，这样一来即没有增添很多的代码，又能大大提高同类项的识别与合并概率。</p><h1 id="发现别人程序bug所采用的策略"><a href="#发现别人程序bug所采用的策略" class="headerlink" title="发现别人程序bug所采用的策略"></a>发现别人程序bug所采用的策略</h1><p>在经历hw2的惨痛教训后（没有好好评测自己的代码），我决定自己搭建一台评测机（主要是请教ChatGpt老师和DeepSeek老师）我让生成式人工智能为我写了一份评测数据的生成脚本，然后交给我自己写的自动化对拍程序，将互测小组内的成员的代码去跑我生成的评测数据并进行对拍，将不一致的结果记录下来，然后为了避免是同质的Bug，选择帮他们修复并重新评测。<br>这就是我这次hack采取的策略，但是不足的是，生成评测数据的脚本不是很强，并没有为我测处太多的bug，但好在为我自己的强测带来了很多好处。</p><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><ul><li><strong>写代码前先思考</strong> ： 如果啥都没想好就开写代码，那么这段代码一定会重构。</li><li><strong>多看学长学姐博客</strong> ： 学习前人经验和优秀的架构是一种好习惯，有时还能启发自己的新思路。</li><li><strong>注意代码的可读性和可拓展性</strong> ：千万不要为了代码量和编写方便而放弃代码的可读性，同时，这次Unit1的迭代开发经验还启示我一定要注意可拓展性。</li><li><strong>写代码时多关注代码指标</strong> ： 如果你发现自己的耦合度或者什么其他指标超标时，那么你就需要改一改你的架构了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇</title>
      <link href="/2025/03/20/%E5%BC%80%E7%AF%87/"/>
      <url>/2025/03/20/%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="哇咔咔"><a href="#哇咔咔" class="headerlink" title="哇咔咔"></a>哇咔咔</h2><p><img src="/../images/%E9%94%A6%E9%B2%A4.jpg" alt="锦鲤"></p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> $^%@#!~ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="简单的自我介绍"><a href="#简单的自我介绍" class="headerlink" title="简单的自我介绍"></a>简单的自我介绍</h2><p>一个爱摸鱼但是也想发paper的北航计算机学生。</p><h2 id="为什么开这个博客"><a href="#为什么开这个博客" class="headerlink" title="为什么开这个博客"></a>为什么开这个博客</h2><p>想记录一下自己的生活（总不能让自己存在的唯一证明是留在沙发上的屁股印吧）</p><h2 id="我的联系方式"><a href="#我的联系方式" class="headerlink" title="我的联系方式"></a>我的联系方式</h2><ul><li>个人邮箱：<a href="mailto:&#74;&#99;&#x68;&#49;&#x38;&#x32;&#57;&#x37;&#52;&#57;&#x39;&#x36;&#54;&#x35;&#x40;&#98;&#x75;&#x61;&#x61;&#46;&#101;&#100;&#117;&#46;&#99;&#x6e;">&#74;&#99;&#x68;&#49;&#x38;&#x32;&#57;&#x37;&#52;&#57;&#x39;&#x36;&#54;&#x35;&#x40;&#98;&#x75;&#x61;&#x61;&#46;&#101;&#100;&#117;&#46;&#99;&#x6e;</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
